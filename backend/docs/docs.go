// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-04-09 09:41:37.367371 +0700 +07 m=+0.032412113

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/friend/block-user": {
            "post": {
                "description": "As a user, I need an API to block updates from an email address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend"
                ],
                "summary": "Block an User",
                "parameters": [
                    {
                        "description": "Input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/friend.BlockUserInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/friend.BlockUserOutput"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/friend.BlockUserOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/friend.BlockUserOutput"
                        }
                    }
                }
            }
        },
        "/friend/get-common-friends": {
            "post": {
                "description": "As a user, I need an API to retrieve the common friends list between two email addresses.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend"
                ],
                "summary": "Get Common Friends",
                "parameters": [
                    {
                        "description": "Input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/friend.GetCommonFriendsInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/friend.GetCommonFriendsOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/friend.GetCommonFriendsOutput"
                        }
                    }
                }
            }
        },
        "/friend/get-friends": {
            "post": {
                "description": "As a user, I need an API to retrieve the friends list for an email address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend"
                ],
                "summary": "Get Friends",
                "parameters": [
                    {
                        "description": "Input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/friend.GetFriendsInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/friend.GetFriendsOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/friend.GetFriendsOutput"
                        }
                    }
                }
            }
        },
        "/friend/get-recipients": {
            "post": {
                "description": "As a user, I need an API to retrieve all email addresses that can receive updates from an email address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend"
                ],
                "summary": "Get Recipients",
                "parameters": [
                    {
                        "description": "Input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/friend.GetRecipientsInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/friend.GetRecipientsOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/friend.GetRecipientsOutput"
                        }
                    }
                }
            }
        },
        "/friend/make-friend": {
            "post": {
                "description": "As a user, I need an API to create a friend connection between two email addresses",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend"
                ],
                "summary": "Make Friend",
                "parameters": [
                    {
                        "description": "Input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/friend.MakeFriendInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/friend.MakeFriendOutput"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/friend.MakeFriendOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/friend.MakeFriendOutput"
                        }
                    }
                }
            }
        },
        "/friend/subscribe-user": {
            "post": {
                "description": "As a user, I need an API to subscribe to updates from an email address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend"
                ],
                "summary": "Subscribe an User",
                "parameters": [
                    {
                        "description": "Input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/friend.SubscribeUserInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/friend.SubscribeUserOutput"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/friend.SubscribeUserOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/friend.SubscribeUserOutput"
                        }
                    }
                }
            }
        },
        "/user/register-user": {
            "post": {
                "description": "As a user, I need an API to create an user by email address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Register an User",
                "parameters": [
                    {
                        "description": "Email",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.RegisterUserInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/user.RegisterUserOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/user.RegisterUserOutput"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "friend.BlockUserInput": {
            "type": "object",
            "properties": {
                "requestor": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                }
            }
        },
        "friend.BlockUserOutput": {
            "type": "object",
            "properties": {
                "msgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "friend.GetCommonFriendsInput": {
            "type": "object",
            "properties": {
                "friends": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "friend.GetCommonFriendsOutput": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "friends": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "msgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "friend.GetFriendsInput": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "friend.GetFriendsOutput": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "friends": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "msgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "friend.GetRecipientsInput": {
            "type": "object",
            "properties": {
                "sender": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "friend.GetRecipientsOutput": {
            "type": "object",
            "properties": {
                "msgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "friend.MakeFriendInput": {
            "type": "object",
            "properties": {
                "friends": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "friend.MakeFriendOutput": {
            "type": "object",
            "properties": {
                "msgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "friend.SubscribeUserInput": {
            "type": "object",
            "properties": {
                "requestor": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                }
            }
        },
        "friend.SubscribeUserOutput": {
            "type": "object",
            "properties": {
                "msgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "user.RegisterUserInput": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                }
            }
        },
        "user.RegisterUserOutput": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "username": {
                            "type": "string"
                        }
                    }
                },
                "msgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
